include('include');
//global GoHeal = false ;
function BestTarget(@item) {
	var summ = isOnlyBulb(@item);
	var IE = _ITEM_EFFECTS[item];
	var ExeptMeIfMinRange = _ITEM_MINRANGE[item] > 0 ? _MY_SELF : null;
	var AliveEnemys = _ALIVE_ENEMIES;
	var AliveAllys = AllAllysExept(ExeptMeIfMinRange);
	
	if (IE[0][0] == EFFECT_DAMAGE && item != WEAPON_B_LASER && item != WEAPON_DESTROYER|| IE[0][0] == EFFECT_POISON) {
		var BestScore = 0;
		var BestEnemy;
		for (var leek in AliveEnemys) {
			var coef = getCoef(leek);
			var RealLife = RealLeeklife(leek);
			if (leek!=null && coef[5] > BestScore && RealLife > 0 && !summ || coef[5] > BestScore && RealLife > 0 && summ && isSummon(leek)) {
				BestScore = coef[5];
				BestEnemy = leek;
			}
		}
		return BestEnemy;
	}
	if (IE[0][0] == EFFECT_SHACKLE_STRENGTH || IE[0] == EFFECT_SHACKLE_MAGIC || item == WEAPON_DESTROYER) {
		var BestScore = 0;
		var BestEnemy;
		for (var leek in AliveEnemys) {
			var coef = getCoef(leek);
			var RealLife = RealLeeklife(leek);
			if (leek!=null && coef[6] > BestScore && RealLife > 0 && !summ || coef[6] > BestScore && RealLife > 0 && summ && isSummon(leek)) {
				//debug("Inside coef Leek : " + getCoef(leek)[6]);
				BestEnemy = leek;
				BestScore = coef[6];

			}
		}
		return BestEnemy;
	}
	if (IE[0][0] == EFFECT_HEAL || item == WEAPON_B_LASER) {
		var BestAlly;
		var BestScore = 1;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[2] > BestScore && RealLife > 0 && !summ || Coef[2] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[2];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_BUFF_FORCE) {
		var BestAlly;
		var BestScore = 1;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[4] > BestScore && RealLife > 0 && !summ || Coef[4] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[4];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_BUFF_MP) {
		var BestAlly;
		var BestScore = 1;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[5] > BestScore && RealLife > 0 && !summ || Coef[5] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[5];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_BUFF_TP) {
		var BestAlly;
		var BestScore = 1;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[6] > BestScore && RealLife > 0 && !summ || Coef[6] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[6];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_BUFF_AGILITY) {
		var BestAlly;
		var BestScore = 1;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[7] > BestScore && RealLife > 0 && !summ || Coef[7] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[7];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_DAMAGE_RETURN) {
		var BestAlly;
		var BestScore = 1;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[8] > BestScore && RealLife > 0 && !summ || Coef[8] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[8];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_ABSOLUTE_SHIELD) {
		var BestAlly;
		var BestScore = 0;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[0] > BestScore && RealLife > 0 && !summ || Coef[0] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[0];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_RELATIVE_SHIELD) {
		var BestAlly;
		var BestScore = 0;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[1] > BestScore && RealLife > 0 && !summ || Coef[1] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[1];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_BOOST_MAX_LIFE) {
		var BestAlly;
		var BestScore = 0;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[3] > BestScore && RealLife > 0 && !summ || Coef[3] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[3];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_BUFF_RESISTANCE) {
		var BestAlly;
		var BestScore = 0;
		for (var target in AliveAllys) {
			var Coef = CoefAlly(target);
			var DoHaveChip = DoesHaveChip(target, item);
			var RealLife = RealLeeklife(target);
			if (target!=null && !DoHaveChip && Coef[9] > BestScore && RealLife > 0 && !summ || Coef[9] > BestScore && RealLife > 0 && summ && isSummon(target)) {
				BestScore = Coef[9];
				BestAlly = target;
			}
		}
		return BestAlly;
	}
	if (IE[0][0] == EFFECT_SUMMON) {
		return _MY_SELF;
	}
}

COEF_SHACKLE_STRENGTH = getCoef(BestTarget(CHIP_FRACTURE))[6];
COEF_DMG = getCoef(BestTarget(CHIP_METEORITE))[5];
COEF_SHACKLE_TP = getCoef(BestTarget(CHIP_METEORITE))[8];
if (inArray(getChips(_MY_SELF), CHIP_INVERSION)) {
	_COEF_VULNERABILITY = getCoef(BestTarget(CHIP_METEORITE))[7];
}

function CoefAlly(@target) {
	var resi = _RESISTANCE[target];
	var aglty = _AGILITY[target];
	var dmgreturn = _DAMAGE_RETURN[target];
	var dist = getCellDistance(_CELL[_MY_SELF], _CELL[target]);
	var strleekg = _STRENGTH[EnemyLeekG];
	var str = _STRENGTH[target];
	var tp = _TP[target];
	var mp = _MP[target];
	var summ = isSummon(target);
	var life = _LIFE[target];
	var totallife = _TOTAL_LIFE[target];
	var lp = LifePercent(life, totallife);
	var ashield = _ABSOLUTE_SHIELD[target];
	var relshield = _RELATIVE_SHIELD[target];
	var COEF_BOOST_RESI = 0 ;
	var COEF_BOOST_AGILITY = 0;
	var COEF_DAMAGE_RETURN = 0;
	var COEF_BOOST_TP = 0;
	var COEF_BOOST_MP = 0;
	var COEF_BOOST_STR = 0;
	var COEF_ABS_SHIELD = 0;
	var COEF_REL_SHIELD = 0;
	var COEF_HEAL = 0;
	var COEF_BOOST_MAX_LIFE = 0;
	var StrShield = strleekg / 10;
	COEF_ABS_SHIELD += StrShield;
	COEF_REL_SHIELD += StrShield;
	if (dmgreturn==0) COEF_DAMAGE_RETURN +=5;
	if (dmgreturn<10) COEF_DAMAGE_RETURN +=4.5;
	if (dmgreturn<20) COEF_DAMAGE_RETURN +=4;
	if (dmgreturn<30) COEF_DAMAGE_RETURN +=3.5;
	if (dmgreturn<40) COEF_DAMAGE_RETURN +=3;
	if (dmgreturn<50) COEF_DAMAGE_RETURN +=2.5;
	if (dmgreturn<60) COEF_DAMAGE_RETURN +=2;
	if (dmgreturn<70) COEF_DAMAGE_RETURN +=1.5;
	if (dmgreturn<80) COEF_DAMAGE_RETURN +=1;
	if (dmgreturn<90) COEF_DAMAGE_RETURN +=0.5;
	
	if (aglty>0) COEF_BOOST_AGILITY +=15;
	if (aglty>=200) COEF_BOOST_AGILITY +=5;
	if (aglty>=300) COEF_BOOST_AGILITY +=5;
	if (aglty>=400) COEF_BOOST_AGILITY +=10;
	if (aglty>=600) COEF_BOOST_AGILITY +=15;
	if (aglty>1000) COEF_BOOST_AGILITY = 0;
	
	if (resi>0) COEF_BOOST_RESI +=15;
	if (resi>=200) COEF_BOOST_RESI +=5;
	if (resi>=300) COEF_BOOST_RESI +=5;
	if (resi>=400) COEF_BOOST_RESI +=10;
	if (resi>=600) COEF_BOOST_RESI +=15;
	if (resi==0) {
		COEF_BOOST_RESI = 0 ;
	}
	if (isSummon(target)) {
		COEF_BOOST_RESI /=5;
	}
	
	
	if (str >= 200) {
		COEF_BOOST_STR += 5;
		COEF_BOOST_MP += 5;
		COEF_BOOST_TP += 5;
	}
	if (str >= 300) {
		COEF_BOOST_STR += 7.5;
		COEF_BOOST_MP += 7.5;
		COEF_BOOST_TP += 7.5;
	}
	if (str >= 400) {
		COEF_BOOST_STR += 10;
		COEF_BOOST_MP += 10;
		COEF_BOOST_TP += 10;
	}
	if (str >= 500) {
		COEF_BOOST_STR += 15;
		COEF_BOOST_MP += 15;
		COEF_BOOST_TP += 15;
	}
	if (str > 1100) COEF_BOOST_STR -= 30;

	if (tp >= 24) COEF_BOOST_TP -= 45;
	if (mp >= 20) COEF_BOOST_MP -= 45;
	
	if (dist < 15) {
			COEF_BOOST_STR += 2.5;
			COEF_BOOST_MP += 2.5;
			COEF_BOOST_TP += 2.5;
		}
		if (dist < 10) {
			COEF_BOOST_STR += 5;
			COEF_BOOST_MP += 5;
			COEF_BOOST_TP += 5;
		}
		if (dist < 5) {
			COEF_BOOST_STR += 7.5;
			COEF_BOOST_MP += 7.5;
			COEF_BOOST_TP += 7.5;
		}
		if (dist <= 1) {
			COEF_BOOST_STR += 10;
			COEF_BOOST_MP += 10;
			COEF_BOOST_TP += 10;
		}
	if (str<200) {
		COEF_BOOST_STR = 0;
	}	
	
	if (summ) {
		COEF_BOOST_STR /= 15;
		COEF_BOOST_MP /= 15;
		COEF_BOOST_TP /= 15;
	}

	if (ashield == 0) {
		COEF_ABS_SHIELD += 5;
	}

	if (ashield < 50) {
		COEF_ABS_SHIELD += 4;
	}

	if (ashield < 100) {
		COEF_ABS_SHIELD += 3;
	}

	if (ashield < 150) {
		COEF_ABS_SHIELD += 2;
	}

	if (ashield < 200) {
		COEF_ABS_SHIELD += 1;
	}

	if (relshield == 0) {
		COEF_REL_SHIELD += 5;
	}
	if (relshield < 10) {
		COEF_REL_SHIELD += 4;
	}
	if (relshield < 20) {
		COEF_REL_SHIELD += 3;
	}
	if (relshield < 30) {
		COEF_REL_SHIELD += 2;
	}
	if (relshield < 40) {
		COEF_REL_SHIELD += 1;
	}

	if (strleekg < 200 && getFightType()==FIGHT_TYPE_SOLO) {
		COEF_REL_SHIELD = 1;
		COEF_ABS_SHIELD = 1;
	}
	if (summ) {
		COEF_REL_SHIELD -= 15;
		COEF_ABS_SHIELD -= 20;
	}

	if (life < totallife) {
		COEF_HEAL += 5;
	}

	if (lp < 80) {
		COEF_HEAL += 3;
	}
	if (lp < 60) {
		COEF_HEAL += 4;
	}
	if (lp < 40) {
		COEF_HEAL += 5;
	}
	if (lp < 20) {
		COEF_HEAL += 6;
	}

	if (lp < 5) {
		COEF_HEAL += 10;
	}
	if (summ) {
		COEF_HEAL /= 5;
	}

	if (life == totallife) {
		COEF_HEAL = 0;
	}

	if (totallife < 2000) {
		COEF_BOOST_MAX_LIFE += 1;
	}
	if (totallife < 1600) {
		COEF_BOOST_MAX_LIFE += 2;
	}
	if (totallife < 1200) {
		COEF_BOOST_MAX_LIFE += 3;
	}
	if (totallife < 800) {
		COEF_BOOST_MAX_LIFE += 4;
	}
	if (totallife < 400) {
		COEF_BOOST_MAX_LIFE += 5;
	}
	if (summ) {
		COEF_BOOST_MAX_LIFE -= 25;
	}
	COEF_BOOST_MAX_LIFE += bulbname(target, EnemyLeekG)[1];
	COEF_BOOST_AGILITY*=600;
	COEF_BOOST_MAX_LIFE *= 2000;
	COEF_HEAL *= 4200;
	COEF_ABS_SHIELD *= 1000;
	COEF_REL_SHIELD *= 3000;
	COEF_DAMAGE_RETURN *=60000;
	COEF_BOOST_STR *= 700;
	COEF_BOOST_MP *= 3300;
	COEF_BOOST_TP *= 3500;
	COEF_BOOST_RESI *=1500;

	return [COEF_ABS_SHIELD, COEF_REL_SHIELD, COEF_HEAL, COEF_BOOST_MAX_LIFE, COEF_BOOST_STR, COEF_BOOST_MP, COEF_BOOST_TP , COEF_BOOST_AGILITY , COEF_DAMAGE_RETURN , COEF_BOOST_RESI];
}

_COEF_ABS_SHIELD = CoefAlly(BestTarget(CHIP_SHIELD))[0];
_COEF_REL_SHIELD = CoefAlly(BestTarget(CHIP_FORTRESS))[1];
_COEF_HEAL = CoefAlly(BestTarget(CHIP_REMISSION))[2];
_COEF_BOOST_MAX_LIFE = CoefAlly(BestTarget(CHIP_ARMORING))[3];
_COEF_BOOST_STR = CoefAlly(BestTarget(CHIP_PROTEIN))[4];
_COEF_BOOST_MP = CoefAlly(BestTarget(CHIP_SEVEN_LEAGUE_BOOTS))[5];
_COEF_BOOST_TP = CoefAlly(BestTarget(CHIP_RAGE))[6];
_COEF_AGILITY = CoefAlly(BestTarget(CHIP_REFLEXES))[7];
_COEF_DMG_RETURN = CoefAlly(BestTarget(CHIP_MIRROR))[8];
_COEF_BOOST_RESI = CoefAlly(BestTarget(CHIP_SOLIDIFICATION))[9];
